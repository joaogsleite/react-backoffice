{"version":3,"sources":["components/Title/index.tsx","components/Title/style.module.scss","components/Button/style.module.scss","components/Icon/index.tsx","components/Button/index.tsx","components/Table/style.module.scss","components/Message/style.module.scss","components/Table/ActionButton.tsx","components/Table/TableHead.tsx","components/Table/TableRow.tsx","components/Message/index.tsx","components/Table/index.tsx","utils/tableConfig.ts","hooks/useTableConfig.ts","hooks/useTableData.ts","hooks/useEntryData.ts","views/Table/index.tsx"],"names":["Title","children","className","fixed","headerClasses","classNames","style","title","headerSpace","memo","module","exports","Icon","name","fixedWidth","iconClasses","Button","disabled","rounded","text","icon","iconPosition","color","position","onClick","wrapperClasses","classes","button","EActionType","TableHead","columns","onColumnClick","actions","handleClick","useCallback","index","column","map","label","ActionButton","data","type","edit","delete","view","getButtonProps","TableRow","fields","field","Object","keys","Message","success","error","loading","message","marginTop","Table","tableData","loadingTableData","table","colSpan","length","emptyTableConfig","layout","emptyColumnConfig","searchable","visible","list","detail","relation","model","allowNull","TableConfig","config","this","find","c","isPk","isTitle","item","pkColumn","Number","titleColumn","itemPK","useTableConfig","tableName","useSelector","state","tables","t","loadingTables","useEffect","tableService","loadingTableConfig","previousTableName","previousEntity","useEntryData","entityName","pks","entryData","undefined","entry","filter","pk","console","log","errorEntry","loadingEntry","isSetPKS","getEntry","TableView","useParams","errorTableData","tableConfig","getTableData","skip","take","useTableData","id","tableContainer"],"mappings":"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","file":"static/js/3.594626c1.chunk.js","sourcesContent":["import React, { FC, memo } from 'react'\nimport classNames from 'classnames'\n\nimport style from './style.module.scss'\n\nexport interface ITitleProps {\n  children?: string,\n  className?: string,\n  fixed?: boolean,\n}\nconst Title: FC<ITitleProps> = ({ children, className = '', fixed = false }) => {\n  const headerClasses = classNames({\n    [style.title]: true,\n    [className]: className,\n    [style.fixed]: fixed,\n  })\n  return <>\n    <div className={headerClasses}>\n      <h1>{children}</h1>\n    </div>\n    {fixed && (\n      <div className={style.headerSpace}></div>\n    )}\n  </>\n}\n\nexport default memo(Title)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"style_title__zC03E\",\"fixed\":\"style_fixed__3Ae6D\",\"headerSpace\":\"style_headerSpace__12-b0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"style_button__2NB1i\",\"danger\":\"style_danger__7zw80\",\"warning\":\"style_warning__bKP17\",\"info\":\"style_info__30-nm\",\"success\":\"style_success__1_oUf\"};","import React, { FC, memo } from 'react';\nimport classNames from 'classnames';\n\nexport interface IIconProps {\n  name: string,\n  fixedWidth?: boolean,\n};\n\nconst Icon: FC<IIconProps> = ({ name, fixedWidth = true }) => {\n  const iconClasses = classNames({\n    'fas': true,\n    [`fa-${name}`]: name,\n    'fa-fw': fixedWidth,\n  })\n\n  return (\n    <i className={iconClasses}></i>\n  )\n};\n\nexport default memo(Icon);","import React, { memo, MouseEvent, FC, ReactNode } from 'react'\nimport classNames from 'classnames'\n\nimport classes from './style.module.scss';\nimport Icon from 'components/Icon';\n\nexport interface IButtonProps {\n  disabled?: boolean,\n  className?: string,\n  rounded?: boolean,\n  text?: string | ReactNode,\n  icon?: string,\n  iconPosition?: 'left' | 'right',\n  color?: string,\n  position?: 'left' | 'right',\n  onClick: ((event: MouseEvent) => void),\n  style?: any,\n}\n\nconst Button: FC<IButtonProps> = ({\n  disabled,\n  className = '',\n  rounded,\n  text,\n  icon = '',\n  iconPosition = 'left',\n  color,\n  position,\n  onClick,\n  style,\n}) => {\n\n  const wrapperClasses = classNames({\n    [classes.button]: true,\n    [classes[color || '']]: color,\n    [classes.position]: position,\n    [classes.rounded]: rounded,\n    [className]: className,\n  });\n\n  return (\n    <button onClick={onClick} className={wrapperClasses} style={style}>\n      {text \n        ? icon \n          ? iconPosition === 'left' \n            ? <>\n                <Icon name={icon} />\n                <span>{text}</span>\n              </> \n            : <>\n                <span>{text}</span>\n                <Icon name={icon} />\n              </>\n          : <span>{text}</span>\n        : <Icon name={icon} />\n    }\n    </button>\n  )\n}\n\nexport default memo(Button);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"style_table__5RjaQ\",\"actions\":\"style_actions__1ZIpo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"style_message__13NtC\"};","import React, { FC, memo, useCallback } from 'react';\nimport Button, { IButtonProps } from 'components/Button';\n\nexport enum EActionType {\n  edit = 'edit',\n  delete = 'delete',\n  view = 'view',\n};\n\nexport interface IActionFunction{\n  (data: any): void\n}\n\nexport interface IActionButtonProps {\n  data: any,\n  type: EActionType,\n  onClick?: IActionFunction,\n};\n\nfunction getButtonProps(type: EActionType): Partial<IButtonProps> {\n  switch(type) {\n    case EActionType.edit:\n      return { icon: 'edit' };\n    case EActionType.delete:\n      return { icon: 'times', color: 'danger' };\n    case EActionType.view:\n    default:\n      return { icon: 'eye' };\n  }\n}\n\nconst ActionButton: FC<IActionButtonProps> = ({ data, type, onClick }) => {\n  const handleClick = useCallback(() => {\n    if (onClick) {\n      onClick(data);\n    }\n  }, [onClick, data])\n  return (\n    <Button\n      {...getButtonProps(type)}\n      onClick={handleClick}\n    />\n  )\n}\n\nexport default memo(ActionButton);","import React, { FC, memo, useCallback } from 'react';\n\nexport interface ITableHeadProps {\n  columns: Array<{ name: string, label?: string } | string>,\n  onColumnClick?: ((columnName: string) => void),\n  actions?: boolean,\n}\n\nconst TableHead: FC<ITableHeadProps> = ({ columns, onColumnClick, actions = false }) => {\n  const handleClick = useCallback((index: number) => {\n    if (!onColumnClick) {\n      return undefined\n    }\n    const column = columns[index]\n    return () => column && onColumnClick(\n      typeof column === 'string'\n        ? column\n        : column.name\n    )\n  }, [columns, onColumnClick])\n  return (\n    <thead>\n      <tr>\n        {columns.map((column, index) => (\n          <th key={index} onClick={handleClick(index)}>\n            {typeof column === 'string'\n              ? column\n              : column.label || column.name\n            }\n          </th>\n        ))}\n        {actions && (\n          <th></th>\n        )}\n      </tr>\n    </thead>\n  )\n}\n\nexport default memo(TableHead);","import React, { FC, memo } from 'react'\nimport { TEntry } from 'reducers/entry'\nimport ActionButton, { IActionFunction, EActionType } from './ActionButton'\n\nimport style from './style.module.scss'\n\nexport interface ITableRowProps {\n  fields: string[]\n  data: TEntry\n  actions?: {\n    [key in EActionType]?: IActionFunction\n  }\n}\n\nconst TableRow: FC<ITableRowProps> = ({ fields, data, actions }) => {\n  return (\n    <tr>\n      {fields.map((field, index) => (\n        <td key={index}>{data[field]}</td>\n      ))}\n      {actions && (\n        <td className={style.actions}>\n          {(Object.keys(actions) as Array<EActionType>).map((type, index) => (\n            <ActionButton\n              key={index}\n              data={data}\n              type={type}\n              onClick={actions[type]}\n            />\n          ))}\n        </td>\n      )}\n    </tr>\n  )\n}\n\nexport default memo(TableRow)","import React, { FC, memo } from 'react'\n\nimport style from './style.module.scss';\n\nexport interface IMessageProps {\n  success?: boolean,\n  error?: boolean\n  loading?: boolean,\n  text?: string,\n  icon?: string,\n}\n\nconst Message: FC<IMessageProps> = ({ success, error, loading, text, icon }) => {\n  return <div className={style.message}>\n\n    { loading && (\n      <i className=\"fa fa-3x fa-spinner fa-pulse\"></i>\n    )}\n\n    { error && (\n      <i className=\"fas fa-3x fa-exclamation-circle\"></i> \n    )}\n\n    { success && (\n      <i className=\"fas fa-3x fa-check\"></i>\n    )}\n\n    { icon && (\n      <i className={ 'fas fa-3x fa-'+icon }></i> \n    )}\n\n    {text && (\n      <div style={{marginTop:25}}>\n        {text}\n      </div>\n    )}\n\n  </div>\n}\n\nexport default memo(Message)\n","import React, { FC, memo } from 'react'\n\nimport TableHead from './TableHead'\nimport TableRow from './TableRow'\n\nimport style from './style.module.scss'\nimport Message from 'components/Message'\nimport { TEntry } from 'reducers/entry'\n\nexport interface ITableProps {\n  columns?: Array<{ name: string, label?: string } | string>\n  tableData: TEntry[]\n  loadingTableData: boolean\n}\n\nconst Table: FC<ITableProps> = ({ columns = [], tableData, loadingTableData }) => {\n  const actions = {\n    edit: () => undefined,\n    delete: () => undefined,\n  }\n  const fields = columns.map((column) => {\n    return typeof column === 'string'\n      ? column\n      : column.name\n  })\n\n  return (\n    <table className={style.table}>\n      <TableHead actions={true} columns={columns} />\n      <tbody>\n        {(\n          loadingTableData && (\n            <tr>\n              <td colSpan={columns.length}>\n                <Message loading />\n              </td>\n            </tr>\n          )\n        ) || (\n          !loadingTableData && (\n            tableData.map(\n              (data, index) => (\n                <TableRow\n                  key={index}\n                  actions={actions}\n                  fields={fields}\n                  data={data}\n                />\n              )\n            )\n          )\n        )}\n      </tbody>\n    </table>\n  )\n}\n\nexport default memo(Table)","import { ITable, IColumn } from \"services/api/models/table\";\n\nexport const emptyTableConfig: ITable = {\n  name: '',\n  columns: [],\n  layout: {\n    label: '',\n  },\n};\n\nexport const emptyColumnConfig: IColumn = {\n  name: '',\n  searchable: false,\n  visible: {\n    list: false,\n    detail: false,\n    relation: false,\n  },\n  model: {\n    type: '',\n    allowNull: true,\n  },\n  layout: {},\n}","import { useEffect } from 'react'\nimport { useSelector } from 'reducers'\n\nimport tableService, { ITable, IColumn }  from 'services/api/models/table'\nimport { emptyTableConfig, emptyColumnConfig } from 'utils/tableConfig'\n\nexport class TableConfig {\n  config: ITable\n  private fields: IColumn[]\n\n  constructor(config?: ITable) {\n    this.config = config || emptyTableConfig\n    this.fields = this.config.columns || []\n  }\n\n  name() {\n    return this.config.name\n  }\n\n  title() {\n    return this.config.layout.label || this.config.name\n  }\n\n  columns() {\n    return this.fields.map((column) => ({\n      name: column.name,\n      label: column.layout?.label || column.name,\n    }))\n  }\n\n  pkColumn(): IColumn {\n    return this.fields.find((c) => c.model && c.model.isPk) || emptyColumnConfig\n  }\n\n  titleColumn() {\n    return this.fields.find((c) => c.layout && c.layout.isTitle) || emptyColumnConfig\n  }\n\n  itemPK(item: any) {\n    const column = this.pkColumn()\n    return Number(item[column.name])\n  }\n\n  itemTitle(item: any) {\n    const column = this.titleColumn()\n    return column && column.name\n      ? item[column.name]\n      : this.itemPK(item)\n  }\n}\n\nexport default function useTableConfig(tableName: string) {\n\n  const table = useSelector((state) => {\n    return state.tables.find((t) => {\n      return t.name === tableName\n    })\n  })\n\n  const loadingTables = table ? table.loading : true\n\n  useEffect(() => {\n    if (!table?.columns && !loadingTables) {\n      tableService.config(tableName)\n    }\n  }, [table, loadingTables, tableName])\n\n  return { \n    table: new TableConfig(table),\n    loadingTableConfig: loadingTables,\n  }\n}","import { useEffect } from 'react'\nimport { useSelector } from 'reducers'\n\nimport tableService  from 'services/api/models/table'\n\nlet previousTableName = ''\n\nexport default function useTableData(tableName: string) {\n\n  const {\n    tableData,\n    errorTableData,\n    loadingTableData,\n    tableConfig\n  } = useSelector((state) => {\n    return {\n      tableData: state.tableData,\n      errorTableData: state.errorTableData,\n      loadingTableData: state.loadingTableData,\n      tableConfig: state.tables.find(\n        (table) => table.name === tableName\n      )\n    }\n  })\n\n  useEffect(() => {\n    if ((!tableData || tableName !== previousTableName) && !loadingTableData && tableConfig?.columns) {\n      previousTableName = tableName\n      tableService.getTableData(tableConfig, {\n        skip: 0,\n        take: 10\n      })\n    }\n  }, [tableData, loadingTableData, tableName, tableConfig])\n\n  return { \n    tableData: tableData || [],\n    loadingTableData,\n    errorTableData,\n  }\n}","import { useEffect } from 'react'\nimport { useSelector } from 'reducers'\n\nimport tableService, { PKS }  from 'services/api/models/table'\nimport useTableConfig from './useTableConfig'\n\nlet previousEntity = ''\n\nfunction isSetPKS(pks: PKS) {\n  return Object.keys(pks).filter(\n    pk => pks[pk] === undefined\n  ).length === 0\n}\n\nexport default function useEntryData(entityName: string, pks: PKS) {\n  const {\n    entryData,\n    loadingEntry,\n    errorEntry\n  } = useSelector((state) => {\n    const entry = previousEntity !== entityName ? undefined : state.entry\n      ? Object.keys(pks).filter(\n        (pk) => {\n          console.log((state.entry as Record<string, unknown>)[pk])\n          return (state.entry as Record<string, unknown>)[pk] === pks[pk]\n        }\n      )\n      : undefined\n    return {\n      entryData: entry,\n      errorEntry: state.errorEntry,\n      loadingEntry: state.loadingEntry,\n    }\n  })\n\n  const { table } = useTableConfig(entityName)\n\n  useEffect(() => {\n    if (!entryData && !loadingEntry && table.columns().length && isSetPKS(pks) && !errorEntry) {\n      previousEntity = entityName\n      tableService.getEntry(table.config, pks)\n    }\n  }, [entityName, entryData, errorEntry, loadingEntry, pks, table])\n\n  return entryData\n}","import React, { FC, memo } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport Title from 'components/Title'\nimport Table from 'components/Table'\n\nimport style from './style.module.scss'\nimport useTableConfig from 'hooks/useTableConfig'\nimport Message from 'components/Message'\nimport useTableData from 'hooks/useTableData'\nimport useEntryData from 'hooks/useEntryData'\n\nexport interface ITableProps {\n\n}\n\nconst TableView: FC<ITableProps> = () => {\n\n  const { tableName = '' } = useParams<any>()\n  \n  const { table, loadingTableConfig } = useTableConfig(tableName)\n  const { tableData, loadingTableData, errorTableData } = useTableData(tableName)\n  console.log(useEntryData(tableName, {id: tableData[0]?.id}))\n  return (\n    <div className={style.tableContainer}>\n      <Title fixed>{table.title()}</Title>\n      {!errorTableData &&\n      (\n        loadingTableConfig\n          ? <Message loading/>\n          : table && tableData && <Table\n            tableData={tableData}\n            loadingTableData={loadingTableData}\n            columns={table.columns()}\n          />\n      )\n      }\n      {errorTableData && (\n        <Message error={!!errorTableData} text={errorTableData}/>\n      )}\n    </div>\n  )\n}\n\nexport default memo(TableView)"],"sourceRoot":""}